#!/usr/bin/env python
"""
Based on ionsval via Dorian Raymer
"""

USAGE="""
Command line tool for sending a state query to one or more EPU controllers and delivering
the result in a file.

Must be run from the top directory (./scripts/epu-state)

usage: ./scripts/epu-state sys_name broker_host target_file controller_name [controller_name] [controller_name] [...]

sys_name: Unique sysname of this launch (it is also known as exchange_scope,
          in a cloudinit.d launch see the "common/deps*" file for this value).

broker_host: The hostname of the RabbitMQ broker, default port is assumed.

controller_name: Service name of the EPU Controller to invoke, this may be repeated to talk to many

"""

import os
import sys

import simplejson as json

from twisted.internet import defer
from twisted.internet import reactor

from epu.ionproc.epu_controller_client import EPUControllerClient
from epu.epucontroller import de_states
from epu import cei_events

from ion.util import procutils
import time
import traceback

import logging

@defer.inlineCallbacks
def state_one(targetname):
    logging.info("Getting state for '%s'" % targetname)
    client = EPUControllerClient(targetname=targetname)
    yield client.attach()
    state = yield client.whole_state()
    logging.info("Received state for '%s'" % targetname)
    defer.returnValue(state)

@defer.inlineCallbacks
def state_all(targetnames, output_filename):
    allstates = {}
    for targetname in targetnames:
        allstates[targetname] = yield state_one(targetname)

    # Unfortunately the event DB can not store such a nested extra dict yet
    #cei_events.event("epu-state", "combined", logging, extra=combined)

    logging.debug("Writing to file '%s'" % output_filename)
    f = open(output_filename, 'w')
    f.write(json.dumps(combined))
    f.write("\n")
    f.close()
    logging.info("Wrote result to file '%s'" % output_filename)

def finish_test(status, container):
    def stop_with_status(res, status):
        reactor.stop()
        global exit_status
        exit_status = status
    d = container.stopService()
    d.addBoth(stop_with_status, status)
    return d

@defer.inlineCallbacks
def run_state_all(targetnames, output_filename, sysname, broker_host, broker_vhost):
    from ion.core.cc import service
    config = service.Options()
    config['broker_host'] = broker_host
    config['broker_vhost'] = broker_vhost
    config['no_shell'] = True
    config['args'] = 'sysname=%s' % (sysname,)
    config['script'] = None
    container = service.CapabilityContainer(config)
    try:
        yield container.startService()
    except Exception:
        traceback.print_exc(file=sys.stdout)
        yield finish_test(2, container)
    try:
        yield state_all(targetnames, output_filename)
        yield finish_test(0, container)
    except Exception:
        traceback.print_exc(file=sys.stdout)
        yield finish_test(1, container)

def main(sysname, broker_host, output_filename, targetname):
    global exit_status
    exit_status = 4
    broker_vhost='/'
    targetnames = [targetname]
    logging.basicConfig(level=logging.DEBUG)
    run_state_all(targetnames, output_filename, sysname, broker_host, broker_vhost)
    reactor.run()
    sys.exit(exit_status)

if __name__ == '__main__':
    if len(sys.argv) < 4:
        print USAGE
        sys.exit(64)
    args = sys.argv[1:]
    main(*args)
