#!/usr/bin/env python
"""
Based on ionsval via Dorian Raymer
"""
from twisted.python.failure import Failure

USAGE="""
Command line tool for sending a state query to one or more EPU controllers and delivering
the result in a file.

Must be run from the top directory (./scripts/epu-state)

usage: ./scripts/epu-state /path/to/messaging.conf target_file controller_name [controller_name] [...]

messaging.conf: messaging configuration file parsable by epu.util

target_file: Where to write the result

controller_name: Service name of the EPU Controller to invoke, this may be repeated to talk to many

"""

import os
import sys
from itertools import izip

import simplejson as json

from twisted.internet import defer
from twisted.internet import reactor

from epu.ionproc.epu_controller_client import EPUControllerClient
from epu.epucontroller import de_states
from epu import cei_events
import epu.util

from ion.util import procutils
import time
import traceback

import logging

@defer.inlineCallbacks
def state_one(targetname, client):
    logging.info("Getting state for '%s'" % targetname)
    state = yield client.whole_state()
    logging.info("Received state for '%s'" % targetname)
    defer.returnValue(state)

@defer.inlineCallbacks
def state_all(targetnames, output_filename):

    allclients = {}
    try:
        for targetname in targetnames:
            allclients[targetname] = EPUControllerClient(targetname=targetname)
            yield allclients[targetname].attach()
    except:
        logging.exception("Could not create EPU controller clients:")
        raise

    allstates = {}
    deferreds = []
    for targetname in targetnames:
        deferreds.append(state_one(targetname, allclients[targetname]))

    dl = defer.DeferredList(deferreds)
    results = yield dl

    for targetname, (success, oneresult) in izip(targetnames, results):
        if not success:
            logging.error("Could not get state from EPU: %s" % targetname)
            if oneresult is Failure:
                oneresult.printTraceback(file=sys.stdout)
        else:
            allstates[targetname] = oneresult

    # Unfortunately the event DB can not store such a nested extra dict yet
    #cei_events.event("epu-state", "combined", logging, extra=combined)

    logging.debug("Writing to file '%s'" % output_filename)
    f = open(output_filename, 'w')
    f.write(json.dumps(allstates))
    f.write("\n")
    f.close()
    logging.info("Wrote result to file '%s'" % output_filename)

def finish_test(status, container):
    def stop_with_status(res, status):
        reactor.stop()
        global exit_status
        exit_status = status
    d = container.stopService()
    d.addBoth(stop_with_status, status)
    return d

@defer.inlineCallbacks
def run_state_all(messaging_conf, targetnames, output_filename):
    from ion.core.cc import service
    config = epu.util.create_container_config(messaging_conf)
    container = service.makeService(config)
    try:
        yield container.startService()
    except Exception:
        traceback.print_exc(file=sys.stdout)
        yield finish_test(2, container)
    try:
        yield state_all(targetnames, output_filename)
        yield finish_test(0, container)
    except Exception:
        traceback.print_exc(file=sys.stdout)
        yield finish_test(1, container)

def main(messaging_conf, output_filename, *args):
    global exit_status
    exit_status = 4
    logging.basicConfig(level=logging.DEBUG)
    if not len(args):
        print "Need at least one controller"
        sys.exit(1)
    run_state_all(messaging_conf, args, output_filename)
    reactor.run()
    sys.exit(exit_status)

if __name__ == '__main__':
    if len(sys.argv) < 3:
        print USAGE
        sys.exit(64)
    args = sys.argv[1:]
    main(*args)
