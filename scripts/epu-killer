#!/usr/bin/env python
"""
Based on ionsval via Dorian Raymer
"""

USAGE="""
Command line tool for killing nodes launched by the provisioner

Must be run from the top directory (./scripts/epu-killer)

usage: ./scripts/epu-killer sys_name broker_host node_ids

sys_name: Unique sysname of this launch (it is also known as exchange_scope,
          in a cloudinit.d launch see the "common/deps*" file for this value).

broker_host: The hostname of the RabbitMQ broker, default port is assumed.

node_ids: a list of all node_ids that should be terminated (separated by
          spaces)

"""

import os
import sys

from twisted.internet import defer
from twisted.internet import reactor

from epu.ionproc.provisioner import ProvisionerClient
from ion.util import procutils

def killer(_, nodes):
    client = ProvisionerClient()
    if nodes:
        client.terminate_nodes(list(nodes))
    else:
        client.terminate_all()
    d = procutils.asleep(1)
    d.addCallbacks(exit_ok, exit_fail)
    return d

def exit_ok(result):
    return 0

def exit_fail(reason):
    reason.printTraceback()
    return 1

def container_error(reason):
    reason.printTraceback()
    return 2

def finish_test(status, container):
    def stop_with_status(res, status):
        reactor.stop()
        global exit_status
        exit_status = status
    d = container.stopService()
    d.addBoth(stop_with_status, status)
    return d

def run_killer(sysname, broker_host, nodes, broker_vhost):
    from ion.core.cc import service
    config = service.Options()
    config['broker_host'] = broker_host
    config['broker_vhost'] = broker_vhost
    config['no_shell'] = True
    config['args'] = 'sysname=%s' % (sysname,)
    config['script'] = None
    container = service.CapabilityContainer(config)
    d = container.startService()
    d.addCallback(killer, nodes)
    d.addErrback(container_error)
    d.addCallback(finish_test, container)
    return d

def main(sysname, broker_host, *args):
    global exit_status
    exit_status = 4

    run_killer(sysname, broker_host, args, broker_vhost='/')
    reactor.run()
    sys.exit(exit_status)

if __name__ == '__main__':
    if len(sys.argv) < 3:
        print USAGE
        sys.exit(64)
    args = sys.argv[1:]
    main(*args)
