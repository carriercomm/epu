#!/usr/bin/env python
"""
Based on ionsval via Dorian Raymer
"""

USAGE="""
Command line tool for killing nodes launched by the provisioner

Must be run from the top directory (./scripts/epu-killer)

usage: ./scripts/epu-killer /path/to/messaging.conf node_ids

messaging.conf: messaging configuration file parsable by epu.util

node_ids: a list of all node_ids that should be terminated (separated by
          spaces)

"""

import os
import sys

from twisted.internet import defer
from twisted.internet import reactor

from epu.ionproc.provisioner import ProvisionerClient
from ion.util import procutils
import epu.util

def killer(_, nodes):
    client = ProvisionerClient()
    if nodes:
        client.terminate_nodes(list(nodes))
    else:
        client.terminate_all(rpcwait=True)
    d = procutils.asleep(1)
    d.addCallbacks(exit_ok, exit_fail)
    return d

def exit_ok(result):
    return 0

def exit_fail(reason):
    reason.printTraceback()
    return 1

def container_error(reason):
    reason.printTraceback()
    return 2

def finish_test(status, container):
    def stop_with_status(res, status):
        reactor.stop()
        global exit_status
        exit_status = status
    d = container.stopService()
    d.addBoth(stop_with_status, status)
    return d

def run_killer(messaging_conf, nodes):
    from ion.core.cc import service
    config = epu.util.create_container_config(messaging_conf)
    container = service.CapabilityContainer(config)
    d = container.startService()
    d.addCallback(killer, nodes)
    d.addErrback(container_error)
    d.addCallback(finish_test, container)
    return d

def main(messaging_conf, *args):
    global exit_status
    exit_status = 4
    run_killer(messaging_conf, args)
    reactor.run()
    sys.exit(exit_status)

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print USAGE
        sys.exit(64)
    args = sys.argv[1:]
    main(*args)
