#!/usr/bin/env python
"""
Based on ionsval via Dorian Raymer
"""

USAGE="""
Command line tool for sending a state query to one EPU controller about one node.

Must be run from the top directory (./scripts/epu-node-error)

usage: ./scripts/epu-node-error /path/to/messaging.conf controller_name node_id

messaging.conf: messaging configuration file parsable by epu.util

controller_name: Service name of the EPU Controller to invoke

node_id: the internal node_id to query about (IDs returned by epu-state)

"""

import os
import sys

import simplejson as json

from twisted.internet import defer
from twisted.internet import reactor

from ion.services.cei.epu_controller_client import EPUControllerClient
from epu.epucontroller import de_states
from epu import cei_events
import epu.util

from ion.util import procutils
import time
import traceback

import logging

@defer.inlineCallbacks
def state_one(targetname):


@defer.inlineCallbacks
def node_error(targetname, node_id):
    logging.info("Getting error for '%s' -> '%s'" % (targetname, node_id))
    client = EPUControllerClient(targetname=targetname)
    yield client.attach()
    result = yield client.node_error(node_id)
    if result:
        logging.info("Received error for '%s' -> '%s':\n\n%s\n\n" % (targetname, node_id, result))
    else:
        logging.info("Received no error for '%s' -> '%s'" % (targetname, node_id))

def finish_test(status, container):
    def stop_with_status(res, status):
        reactor.stop()
        global exit_status
        exit_status = status
    d = container.stopService()
    d.addBoth(stop_with_status, status)
    return d

@defer.inlineCallbacks
def run_node_error(messaging_conf, targetname, node_id):
    from ion.core.cc import service
    config = epu.util.create_container_config(messaging_conf)
    container = service.CapabilityContainer(config)
    try:
        yield container.startService()
    except Exception:
        traceback.print_exc(file=sys.stdout)
        yield finish_test(2, container)
    try:
        yield node_error(targetname, node_id)
        yield finish_test(0, container)
    except Exception:
        traceback.print_exc(file=sys.stdout)
        yield finish_test(1, container)

def main(messaging_conf, targetname, node_id):
    global exit_status
    exit_status = 4
    logging.basicConfig(level=logging.DEBUG)
    run_node_error(messaging_conf, targetname, node_id)
    reactor.run()
    sys.exit(exit_status)

if __name__ == '__main__':
    if len(sys.argv) < 3:
        print USAGE
        sys.exit(64)
    args = sys.argv[1:]
    main(*args)
