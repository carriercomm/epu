#!/usr/bin/env python
"""
Based on ionsval via Dorian Raymer
"""

USAGE="""
Command line tool for sending a state check invocation to an EPU Controller and
waiting for it to move to STABLE.

Must be run from the top directory (./scripts/epu-state-wait)

usage: ./scripts/epu-state-wait /path/to/messaging.conf controller_name

messaging.conf: messaging configuration file parsable by epu.util

controller_name: Service name of the EPU Controller to invoke

"""

import os
import sys

import simplejson as json

from twisted.internet import defer
from twisted.internet import reactor

from ion.services.cei.epu_controller_client import EPUControllerClient
from epu.epucontroller import de_states
from ion.util import procutils
import epu.util

import time
import traceback

@defer.inlineCallbacks
def state_wait(targetname):
    print "\nGetting state.\n"
    client = EPUControllerClient(targetname=targetname)
    yield client.attach()
    failures = 0
    state = None
    while state != de_states.STABLE:
        state = None
        if failures >= 3:
            raise Exception("Could not obtain EPU state three times in a row, giving up.")
        time.sleep(4) # no shame
        try:
            state = yield client.de_state()
            failures = 0
        except Exception,e:
            print "Problem obtaining state: %s" % str(e)
            failures += 1
        if state == de_states.UNKNOWN:
            raise Exception("DE does not support state")
        if state:
            print "\nGot state: %s\n" % state
    print "Reached stable state: %s" % targetname

def finish_test(status, container):
    def stop_with_status(res, status):
        reactor.stop()
        global exit_status
        exit_status = status
    d = container.stopService()
    d.addBoth(stop_with_status, status)
    return d

@defer.inlineCallbacks
def run_state_wait(messaging_conf, targetname):
    from ion.core.cc import service
    config = epu.util.create_container_config(messaging_conf)
    container = service.CapabilityContainer(config)
    try:
        print "\nStarting up.\n"
        yield container.startService()
    except Exception:
        traceback.print_exc(file=sys.stdout)
        yield finish_test(2, container)
    try:
        yield state_wait(targetname)
        print "\nCleaning up.\n"
        yield finish_test(0, container)
    except Exception:
        traceback.print_exc(file=sys.stdout)
        yield finish_test(1, container)

def main(messaging_conf, targetname):
    global exit_status
    exit_status = 4
    run_state_wait(messaging_conf, targetname)
    reactor.run()
    sys.exit(exit_status)

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print USAGE
        sys.exit(64)
    args = sys.argv[1:]
    main(*args)
